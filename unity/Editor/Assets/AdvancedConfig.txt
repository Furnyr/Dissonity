using Dissonity;
using Dissonity.Models;
using Dissonity.Models.Builders;

[DissonityConfig]
public class DissonityConfiguration : SdkConfiguration<MyServerRequest, MyServerResponse>
{
    // Advanced configuration
    // Hover over properties for more information!

    // Initialization
    public override long ClientId => 0;
    public override string[] OauthScopes => new string[] { OauthScope.Identify, /*, your-oauth-scopes*/ };
    public override string TokenRequestPath => "/api/token";
    public override bool LazyHiRpcLoad => false;

    // Logging
    public override bool DisableConsoleLogOverride => true;
    public override bool DisableDissonityInfoLogs => false;
    
    // Patch Url Mappings
    public override MappingBuilder[] Mappings => new MappingBuilder[] {
        new()
        /*{
            Prefix = "/example",
            Target = "example.com"
        }*/
    };
    public override PatchUrlMappingsConfigBuilder PatchUrlMappingsConfig => new()
    {
        PatchFetch = true,
        PatchWebSocket = true,
        PatchXhr = true,
        PatchSrcAttributes = false
    };

    // Utils
    public override bool SynchronizeUser => false;
    public override bool SynchronizeGuildMemberRpc => false;

    // Resolution
    public override ScreenResolution DesktopResolution => ScreenResolution.Max;
    public override ScreenResolution MobileResolution => ScreenResolution.Max;
    public override ScreenResolution BrowserResolution => ScreenResolution.Dynamic;
}

// If you want to get or send data to your backend while authenticating, define it here.
// You can access the response object in the Api.Initialize return value.
public class MyServerRequest : ServerTokenRequest {}
public class MyServerResponse : ServerTokenResponse {}